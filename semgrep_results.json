{"errors": [{"code": 2, "level": "warn", "message": "Timeout when running javascript.express.security.audit.remote-property-injection.remote-property-injection on dvpwa/sqli/static/js/materialize.js:\n ", "path": "dvpwa/sqli/static/js/materialize.js", "rule_id": "javascript.express.security.audit.remote-property-injection.remote-property-injection", "type": "Timeout"}], "interfile_languages_used": [], "paths": {"scanned": [".pyre_configuration", ".~lock.bandit_report.csv#", ".~lock.safety_report.csv#", "CodeSecure Logo.png", "bandit_results.csv", "cs.py", "dvpwa/.gitignore", "dvpwa/Dockerfile.app", "dvpwa/Dockerfile.db", "dvpwa/LICENSE", "dvpwa/README.rst", "dvpwa/config/dev.yaml", "dvpwa/docker-compose.yml", "dvpwa/migrations/000-init-schema.sql", "dvpwa/migrations/001-fixtures.sql", "dvpwa/recreate.sh", "dvpwa/requirements.txt", "dvpwa/run.py", "dvpwa/sqli/__init__.py", "dvpwa/sqli/app.py", "dvpwa/sqli/dao/__init__.py", "dvpwa/sqli/dao/course.py", "dvpwa/sqli/dao/mark.py", "dvpwa/sqli/dao/review.py", "dvpwa/sqli/dao/student.py", "dvpwa/sqli/dao/user.py", "dvpwa/sqli/middlewares.py", "dvpwa/sqli/routes.py", "dvpwa/sqli/schema/__init__.py", "dvpwa/sqli/schema/config.py", "dvpwa/sqli/schema/forms.py", "dvpwa/sqli/services/__init__.py", "dvpwa/sqli/services/db.py", "dvpwa/sqli/services/redis.py", "dvpwa/sqli/static/css/materialize.css", "dvpwa/sqli/static/css/materialize.min.css", "dvpwa/sqli/static/fonts/roboto/Roboto-Bold.woff", "dvpwa/sqli/static/fonts/roboto/Roboto-Bold.woff2", "dvpwa/sqli/static/fonts/roboto/Roboto-Light.woff", "dvpwa/sqli/static/fonts/roboto/Roboto-Light.woff2", "dvpwa/sqli/static/fonts/roboto/Roboto-Medium.woff", "dvpwa/sqli/static/fonts/roboto/Roboto-Medium.woff2", "dvpwa/sqli/static/fonts/roboto/Roboto-Regular.woff", "dvpwa/sqli/static/fonts/roboto/Roboto-Regular.woff2", "dvpwa/sqli/static/fonts/roboto/Roboto-Thin.woff", "dvpwa/sqli/static/fonts/roboto/Roboto-Thin.woff2", "dvpwa/sqli/static/js/init.js", "dvpwa/sqli/static/js/materialize.js", "dvpwa/sqli/templates/base.jinja2", "dvpwa/sqli/templates/course.jinja2", "dvpwa/sqli/templates/courses.jinja2", "dvpwa/sqli/templates/errors/40x.jinja2", "dvpwa/sqli/templates/errors/50x.jinja2", "dvpwa/sqli/templates/evaluate.jinja2", "dvpwa/sqli/templates/index.jinja2", "dvpwa/sqli/templates/review.jinja2", "dvpwa/sqli/templates/student.jinja2", "dvpwa/sqli/templates/students.jinja2", "dvpwa/sqli/utils/__init__.py", "dvpwa/sqli/utils/auth.py", "dvpwa/sqli/utils/jinja2.py", "dvpwa/sqli/views.py", "requirements.txt"]}, "results": [{"check_id": "yaml.docker-compose.security.no-new-privileges.no-new-privileges", "end": {"col": 8, "line": 11, "offset": 135}, "extra": {"engine_kind": "OSS", "fingerprint": "eefd507b18943da5c636aad91cf8c069207fe24b24200780f7d1cee3a5f015115cb362fccca37450c3dc52424cf79483fc1b785bf446de1e1177ae5737e6c2ac_0", "is_ignored": false, "lines": "  redis:", "message": "Service 'redis' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/", "https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "qNUoWr", "url": "https://semgrep.dev/playground/r/qkT2BLp/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "version_id": "qkT2BLp"}}, "shortlink": "https://sg.run/0n8q", "source": "https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "redis", "end": {"col": 8, "line": 11, "offset": 135}, "start": {"col": 3, "line": 11, "offset": 130}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/docker-compose.yml", "start": {"col": 3, "line": 11, "offset": 130}}, {"check_id": "yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "end": {"col": 8, "line": 11, "offset": 135}, "extra": {"engine_kind": "OSS", "fingerprint": "de3506689c83fec4610b861d5b03fad8ab067ef9a545620c2312a70112a4bb5304eaf4021293f6150aa909e74ae40ae8cf6eaf317e7dff7d3c0e875fd64cced7_0", "is_ignored": false, "lines": "  redis:", "message": "Service 'redis' is running with a writable root filesystem. This may allow malicious applications to download and run additional payloads, or modify container files. If an application inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this service to prevent this.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-732: Incorrect Permission Assignment for Critical Resource"], "cwe2021-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir", "https://blog.atomist.com/security-of-docker-kubernetes/", "https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "v8U5vN", "url": "https://semgrep.dev/playground/r/o5Tg9ob/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "version_id": "o5Tg9ob"}}, "shortlink": "https://sg.run/e4JE", "source": "https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service", "subcategory": ["audit"], "technology": ["docker-compose"], "vulnerability_class": ["Improper Authorization"]}, "metavars": {"$SERVICE": {"abstract_content": "redis", "end": {"col": 8, "line": 11, "offset": 135}, "start": {"col": 3, "line": 11, "offset": 130}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/docker-compose.yml", "start": {"col": 3, "line": 11, "offset": 130}}, {"check_id": "python.lang.security.audit.formatted-sql-query.formatted-sql-query", "end": {"col": 33, "line": 45, "offset": 1391}, "extra": {"engine_kind": "OSS", "fingerprint": "59282abd964b3e73ddea5f9d9b7c23104e8a363b1216af0d41c2defc90dd893f6dbb807e10accf220e2da3fefc62a74a331e127587ff99af624f9d56532784dd_0", "is_ignored": false, "lines": "            await cur.execute(q)", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "3qUP9k", "url": "https://semgrep.dev/playground/r/0bTLexz/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "version_id": "0bTLexz"}}, "shortlink": "https://sg.run/EkWw", "source": "https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query", "subcategory": ["audit"], "technology": ["python"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$DB": {"abstract_content": "cur", "end": {"col": 22, "line": 45, "offset": 1380}, "start": {"col": 19, "line": 45, "offset": 1377}}, "$SQL": {"abstract_content": "q", "end": {"col": 32, "line": 45, "offset": 1390}, "start": {"col": 31, "line": 45, "offset": 1389}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/dao/student.py", "start": {"col": 19, "line": 45, "offset": 1377}}, {"check_id": "python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "end": {"col": 33, "line": 45, "offset": 1391}, "extra": {"engine_kind": "OSS", "fingerprint": "df8d2c96d49bd21fc59ab736f7cea6d3cf0b4420f165e6f0064800af1398aebed71d01ecacd7413a4256c841cc4167a53a571b2db2aadb2edf0006781c314f53_0", "is_ignored": false, "lines": "            await cur.execute(q)", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "oqUz5y", "url": "https://semgrep.dev/playground/r/A8T9Xrg/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "version_id": "A8T9Xrg"}}, "shortlink": "https://sg.run/2b1L", "source": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query", "subcategory": ["audit"], "technology": ["sqlalchemy"], "vulnerability_class": ["SQL Injection"]}, "metavars": {"$CONNECTION": {"abstract_content": "cur", "end": {"col": 22, "line": 45, "offset": 1380}, "start": {"col": 19, "line": 45, "offset": 1377}}, "$QUERY": {"abstract_content": "q", "end": {"col": 32, "line": 45, "offset": 1390}, "start": {"col": 31, "line": 45, "offset": 1389}}, "$SQL": {"abstract_content": "\"INSERT INTO students (name) \"\"VALUES ('%(name)s')\"", "end": {"col": 35, "line": 43, "offset": 1299}, "start": {"col": 14, "line": 42, "offset": 1234}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/dao/student.py", "start": {"col": 19, "line": 45, "offset": 1377}}, {"check_id": "python.lang.security.audit.md5-used-as-password.md5-used-as-password", "end": {"col": 74, "line": 41, "offset": 1239}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 74, "line": 41, "offset": 1239}, "path": "dvpwa/sqli/dao/user.py", "start": {"col": 33, "line": 41, "offset": 1198}}, "md5(password.encode('utf-8')).hexdigest()"]], "taint_source": ["CliLoc", [{"end": {"col": 36, "line": 41, "offset": 1201}, "path": "dvpwa/sqli/dao/user.py", "start": {"col": 33, "line": 41, "offset": 1198}}, "md5"]]}, "engine_kind": "OSS", "fingerprint": "1018d3dbf0523eae728180bc07a939be46e271dd3a247c405dcd0a7bd290c7476c10dcdbdf8a4c6b5a7bd9e2f41754b377fb2f527e98a3f3efa37de293c7f01e_0", "is_ignored": false, "lines": "        return self.pwd_hash == md5(password.encode('utf-8')).hexdigest()", "message": "It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "HIGH", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://tools.ietf.org/html/rfc6151", "https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision", "https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html", "https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords", "https://github.com/returntocorp/semgrep-rules/issues/1609", "https://docs.python.org/3/library/hashlib.html#hashlib.scrypt"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "6JU1w1", "url": "https://semgrep.dev/playground/r/9lTd5d6/python.lang.security.audit.md5-used-as-password.md5-used-as-password", "version_id": "9lTd5d6"}}, "shortlink": "https://sg.run/5DwD", "source": "https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password", "subcategory": ["vuln"], "technology": ["pycryptodome", "hashlib", "md5"], "vulnerability_class": ["Cryptographic Issues"]}, "metavars": {"$1": {"abstract_content": "md5(password.encode('utf-8')).hexdigest", "end": {"col": 40, "line": 1, "offset": 39}, "start": {"col": 1, "line": 1, "offset": 0}}, "$FUNCTION": {"abstract_content": "md5(password.encode('utf-8')).hexdigest", "end": {"col": 72, "line": 41, "offset": 1237}, "start": {"col": 33, "line": 41, "offset": 1198}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/dao/user.py", "start": {"col": 33, "line": 41, "offset": 1198}}, {"check_id": "javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "end": {"col": 158, "line": 565, "offset": 32860}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "t", "location": {"end": {"col": 39, "line": 564, "offset": 32699}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 38, "line": 564, "offset": 32698}}}], "taint_sink": ["CliLoc", [{"end": {"col": 158, "line": 565, "offset": 32860}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 94, "line": 565, "offset": 32796}}, "new RegExp(\"(^|\\\\s)\" + t.split(\" \").join(\"|\") + \"(\\\\s|$)\", \"gi\")"]], "taint_source": ["CliLoc", [{"end": {"col": 39, "line": 564, "offset": 32699}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 38, "line": 564, "offset": 32698}}, "t"]]}, "engine_kind": "OSS", "fingerprint": "a7cdfef96dbcf26221361908f0f53281b09f97bfb30355cef4e2c71375001c233536bcf37e07feac57c603db23d6ff11f76f143e22856b304af0cd563f02d470_0", "is_ignored": false, "lines": "          e.classList ? e.classList.remove(t) : e.className = e.className.toString().replace(new RegExp(\"(^|\\\\s)\" + t.split(\" \").join(\"|\") + \"(\\\\s|$)\", \"gi\"), \" \");", "message": "RegExp() called with a `t` function argument, this might allow an attacker to cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-controlled input, consider performing input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to ReDoS.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-1333: Inefficient Regular Expression Complexity"], "impact": "MEDIUM", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A05:2021 - Security Misconfiguration", "A06:2017 - Security Misconfiguration"], "references": ["https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "zdU1gD", "url": "https://semgrep.dev/playground/r/w8T9nxz/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "version_id": "w8T9nxz"}}, "shortlink": "https://sg.run/gr65", "source": "https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp", "source-rule-url": "https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js", "subcategory": ["vuln"], "technology": ["javascript"], "vulnerability_class": ["Denial-of-Service (DoS)"]}, "metavars": {"$ARG": {"abstract_content": "t", "end": {"col": 39, "line": 564, "offset": 32699}, "start": {"col": 38, "line": 564, "offset": 32698}}}, "severity": "WARNING", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 94, "line": 565, "offset": 32796}}, {"check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "end": {"col": 353, "line": 645, "offset": 40995}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 353, "line": 645, "offset": 40995}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 318, "line": 645, "offset": 40960}}, "\"Unit ratios: \" + JSON.stringify(l)"]], "taint_source": ["CliLoc", [{"end": {"col": 353, "line": 645, "offset": 40995}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 318, "line": 645, "offset": 40960}}, "\"Unit ratios: \" + JSON.stringify(l)"]]}, "engine_kind": "OSS", "fingerprint": "5ea519127c32f4295215e788d0f98cee3f3ffa0745241d82ccea48adf1105b5b768bbbabca90fcaa4fa3fde617998a10cf161abdda595705c7765b73ddea4e5e_0", "is_ignored": false, "lines": "            }return null === L.remToPx && (L.remToPx = parseFloat(S.getPropertyValue(r.body, \"fontSize\")) || 16), null === L.vwToPx && (L.vwToPx = parseFloat(t.innerWidth) / 100, L.vhToPx = parseFloat(t.innerHeight) / 100), l.remToPx = L.remToPx, l.vwToPx = L.vwToPx, l.vhToPx = L.vhToPx, b.debug >= 1 && console.log(\"Unit ratios: \" + JSON.stringify(l), o), l;", "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-134: Use of Externally-Controlled Format String"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://cwe.mitre.org/data/definitions/134.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReU3OJ", "url": "https://semgrep.dev/playground/r/5PTdADB/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "version_id": "5PTdADB"}}, "shortlink": "https://sg.run/7Y5R", "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "subcategory": ["audit"], "technology": ["javascript"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$LOG": {"abstract_content": "log", "end": {"col": 317, "line": 645, "offset": 40959}, "start": {"col": 314, "line": 645, "offset": 40956}}, "$PARAM": {"abstract_content": "o", "end": {"col": 356, "line": 645, "offset": 40998}, "start": {"col": 355, "line": 645, "offset": 40997}}, "$STR": {"abstract_content": "\"Unit ratios: \"+JSON.stringify(l)", "end": {"col": 353, "line": 645, "offset": 40995}, "start": {"col": 318, "line": 645, "offset": 40960}}, "$X": {"abstract_content": "\"Unit ratios: \"", "end": {"col": 333, "line": 645, "offset": 40975}, "start": {"col": 318, "line": 645, "offset": 40960}}, "$Y": {"abstract_content": "JSON.stringify(l)", "end": {"col": 353, "line": 645, "offset": 40995}, "start": {"col": 336, "line": 645, "offset": 40978}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 318, "line": 645, "offset": 40960}}, {"check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "end": {"col": 246, "line": 661, "offset": 42805}, "extra": {"dataflow_trace": {"intermediate_vars": [], "taint_sink": ["CliLoc", [{"end": {"col": 246, "line": 661, "offset": 42805}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 184, "line": 661, "offset": 42743}}, "\"reverse tweensContainer (\" + H + \"): \" + JSON.stringify(E[H])"]], "taint_source": ["CliLoc", [{"end": {"col": 215, "line": 661, "offset": 42774}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 184, "line": 661, "offset": 42743}}, "\"reverse tweensContainer (\" + H"]]}, "engine_kind": "OSS", "fingerprint": "e8c48b19bfd4582844f0748ce2e65fd115ade82822e5978fe98cfe7075c9ea4ff0d80b200f07b052476b8199c064afb5bd7340620a08133ecfa68e102bc70984_0", "is_ignored": false, "lines": "                var N = E[H].startValue;E[H].startValue = E[H].currentValue = E[H].endValue, E[H].endValue = N, m.isEmptyObject(v) || (E[H].easing = s.easing), b.debug && console.log(\"reverse tweensContainer (\" + H + \"): \" + JSON.stringify(E[H]), o);", "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-134: Use of Externally-Controlled Format String"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://cwe.mitre.org/data/definitions/134.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReU3OJ", "url": "https://semgrep.dev/playground/r/5PTdADB/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "version_id": "5PTdADB"}}, "shortlink": "https://sg.run/7Y5R", "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "subcategory": ["audit"], "technology": ["javascript"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$LOG": {"abstract_content": "log", "end": {"col": 183, "line": 661, "offset": 42742}, "start": {"col": 180, "line": 661, "offset": 42739}}, "$PARAM": {"abstract_content": "o", "end": {"col": 249, "line": 661, "offset": 42808}, "start": {"col": 248, "line": 661, "offset": 42807}}, "$STR": {"abstract_content": "\"reverse tweensContainer (\"+H+\"): \"+JSON.stringify(E[H])", "end": {"col": 246, "line": 661, "offset": 42805}, "start": {"col": 184, "line": 661, "offset": 42743}}, "$X": {"abstract_content": "\"reverse tweensContainer (\"", "end": {"col": 211, "line": 661, "offset": 42770}, "start": {"col": 184, "line": 661, "offset": 42743}}, "$Y": {"abstract_content": "H", "end": {"col": 215, "line": 661, "offset": 42774}, "start": {"col": 214, "line": 661, "offset": 42773}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 184, "line": 661, "offset": 42743}}, {"check_id": "javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "end": {"col": 211, "line": 699, "offset": 45837}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "M", "location": {"end": {"col": 233, "line": 682, "offset": 44111}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 232, "line": 682, "offset": 44110}}}, {"content": "l", "location": {"end": {"col": 33, "line": 699, "offset": 45659}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 32, "line": 699, "offset": 45658}}}], "taint_sink": ["CliLoc", [{"end": {"col": 211, "line": 699, "offset": 45837}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 157, "line": 699, "offset": 45783}}, "\"tweensContainer (\" + z + \"): \" + JSON.stringify(l[z])"]], "taint_source": ["CliLoc", [{"end": {"col": 265, "line": 682, "offset": 44143}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 236, "line": 682, "offset": 44114}}, "E[z].endValue + E[z].unitType"]]}, "engine_kind": "OSS", "fingerprint": "2dcafec817dfde812e7be30e5464aefbe7f1b79d2dea2097d5bdc2d6f7cbcef212b969cbbef78f493bde863fb880b971ed002fa7a93e899402616a1e88b1fda1_0", "is_ignored": false, "lines": "                    q = M / q;}l[z] = { rootPropertyValue: B, startValue: M, currentValue: M, endValue: q, unitType: G, easing: $ }, b.debug && console.log(\"tweensContainer (\" + z + \"): \" + JSON.stringify(l[z]), o);", "message": "Detected string concatenation with a non-literal variable in a util.format / console.log function. If an attacker injects a format specifier in the string, it will forge the log message. Try to use constant values for the format string.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-134: Use of Externally-Controlled Format String"], "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "MEDIUM", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://cwe.mitre.org/data/definitions/134.html"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReU3OJ", "url": "https://semgrep.dev/playground/r/5PTdADB/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "version_id": "5PTdADB"}}, "shortlink": "https://sg.run/7Y5R", "source": "https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring", "subcategory": ["audit"], "technology": ["javascript"], "vulnerability_class": ["Improper Validation"]}, "metavars": {"$LOG": {"abstract_content": "log", "end": {"col": 156, "line": 699, "offset": 45782}, "start": {"col": 153, "line": 699, "offset": 45779}}, "$PARAM": {"abstract_content": "o", "end": {"col": 214, "line": 699, "offset": 45840}, "start": {"col": 213, "line": 699, "offset": 45839}}, "$STR": {"abstract_content": "\"tweensContainer (\"+z+\"): \"+JSON.stringify(l[z])", "end": {"col": 211, "line": 699, "offset": 45837}, "start": {"col": 157, "line": 699, "offset": 45783}}, "$X": {"abstract_content": "E[z].endValue", "end": {"col": 249, "line": 682, "offset": 44127}, "start": {"col": 236, "line": 682, "offset": 44114}}, "$Y": {"abstract_content": "E[z].unitType", "end": {"col": 265, "line": 682, "offset": 44143}, "start": {"col": 252, "line": 682, "offset": 44130}}}, "severity": "INFO", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 157, "line": 699, "offset": 45783}}, {"check_id": "javascript.browser.security.insecure-document-method.insecure-document-method", "end": {"col": 42, "line": 3444, "offset": 147730}, "extra": {"engine_kind": "OSS", "fingerprint": "deea8a914e0824141266879143e4c42c72f008f59dd391ccf3b7f9de11fefe7779c2ad9b436a15c6a4e96f4f5fe4dba2ef1162ccf989355e59da02ce0646d6d7_0", "is_ignored": false, "lines": "          toast.innerHTML = this.message;", "message": "User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern that can lead to XSS vulnerabilities", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "LOW", "license": "Commons Clause License Condition v1.0[LGPL-2.1-only]", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://owasp.org/Top10/A03_2021-Injection"], "semgrep.dev": {"rule": {"origin": "community", "rule_id": "ReUg41", "url": "https://semgrep.dev/playground/r/O9TNO1x/javascript.browser.security.insecure-document-method.insecure-document-method", "version_id": "O9TNO1x"}}, "shortlink": "https://sg.run/LwA9", "source": "https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method", "subcategory": ["audit"], "technology": ["browser"], "vulnerability_class": ["Cross-Site-Scripting (XSS)"]}, "metavars": {"$EL": {"abstract_content": "toast", "end": {"col": 16, "line": 3444, "offset": 147704}, "start": {"col": 11, "line": 3444, "offset": 147699}}, "$HTML": {"abstract_content": "this.message", "end": {"col": 41, "line": 3444, "offset": 147729}, "start": {"col": 29, "line": 3444, "offset": 147717}}}, "severity": "ERROR", "validation_state": "NO_VALIDATOR"}, "path": "dvpwa/sqli/static/js/materialize.js", "start": {"col": 11, "line": 3444, "offset": 147699}}], "skipped_rules": [], "version": "1.51.0"}
