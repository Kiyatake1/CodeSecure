vulnerability_id,package,installed,affected,description,references
59956,certifi,2020.6.20,,"Certifi 2023.07.22 includes a fix for CVE-2023-37920: Certifi prior to version 2023.07.22 recognizes ""e-Tugra"" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from ""e-Tugra"" from the root store.
https://github.com/certifi/python-certifi/security/advisories/GHSA-xqr8-7jwr-rhp7",https://data.safetycli.com/v/59956/f17
52365,certifi,2020.6.20,,"Certifi 2022.12.07 includes a fix for CVE-2022-23491: Certifi 2022.12.07 removes root certificates from ""TrustCor"" from the root store. These are in the process of being removed from Mozilla's trust store. TrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found in the linked google group discussion.
https://github.com/certifi/python-certifi/security/advisories/GHSA-43fp-rhv2-5gv8
https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/oxX69KFvsm4/m/yLohoVqtCgAJ",https://data.safetycli.com/v/52365/f17
52495,setuptools,59.6.0,,"Setuptools 65.5.1 includes a fix for CVE-2022-40897: Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages",https://data.safetycli.com/v/52495/f17
51885,pillow,9.0.1,,Pillow before 9.2.0 performs Improper Handling of Highly Compressed GIF Data (Data Amplification).,https://data.safetycli.com/v/51885/f17
50474,protobuf,3.12.4,,"Protobuf 3.15.0 includes a fix for CVE-2021-22570: Nullptr dereference when a null char is present in a proto symbol. The symbol is parsed incorrectly, leading to an unchecked call into the proto file's name during generation of the resulting error message. Since the symbol is incorrectly parsed, the file is nullptr.",https://data.safetycli.com/v/50474/f17
51167,protobuf,3.12.4,,"Protobuf 3.18.3, 3.19.5, 3.20.2 and 4.21.6 include a fix for CVE-2022-1941: A parsing vulnerability for the MessageSet type in the ProtocolBuffers versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 3.21.5 for protobuf-cpp, and versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 4.21.5 for protobuf-python can lead to out of memory failures. A specially crafted message with multiple key-value per elements creates parsing issues, and can lead to a Denial of Service against services receiving unsanitized input.
https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-8gq9-2x98-w8hf",https://data.safetycli.com/v/51167/f17
60276,reportlab,3.6.8,,"Reportlab 3.6.13 includes a fix for a Remote Code Execution vulnerability via supplying a crafted PDF file.
https://github.com/advisories/GHSA-9q9m-c65c-37pq
https://github.com/c53elyas/CVE-2023-33733",https://data.safetycli.com/v/60276/f17
59473,cryptography,3.4.8,,The cryptography package before 41.0.2 for Python mishandles SSH certificates that have critical options.,https://data.safetycli.com/v/59473/f17
53048,cryptography,3.4.8,,"Cryptography 39.0.1 includes a fix for CVE-2023-23931: In affected versions 'Cipher.update_into' would accept Python objects which implement the buffer protocol, but provide only immutable buffers. This would allow immutable objects (such as 'bytes') to be mutated, thus violating fundamental rules of Python and resulting in corrupted output. This issue has been present since 'update_into' was originally introduced in cryptography 1.8.
https://github.com/pyca/cryptography/security/advisories/GHSA-w7pp-m8wf-vj6r",https://data.safetycli.com/v/53048/f17
50959,oauthlib,3.2.0,,"OAuthLib 3.2.1 includes a fix for CVE-2022-36087: In OAuthLib versions 3.1.1 until 3.2.1, an attacker providing malicious redirect uri can cause denial of service. An attacker can also leverage usage of 'uri_validate' functions depending where it is used. OAuthLib applications using OAuth2.0 provider support or use directly 'uri_validate' are affected by this issue. There are no known workarounds.
https://github.com/oauthlib/oauthlib/security/advisories/GHSA-3pgj-pg6c-r5p7",https://data.safetycli.com/v/50959/f17
58755,requests,2.25.1,,"Requests 2.31.0 includes a fix for CVE-2023-32681: Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use 'rebuild_proxies' to reattach the 'Proxy-Authorization' header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the 'Proxy-Authorization' header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information.",https://data.safetycli.com/v/58755/f17
48542,pyjwt,2.3.0,,"PyJWT 2.4.0 includes a fix for CVE-2022-29217: An attacker submitting the JWT token can choose the used signing algorithm. The PyJWT library requires that the application chooses what algorithms are supported. The application can specify 'jwt.algorithms.get_default_algorithms()' to get support for all algorithms, or specify a single algorithm. The issue is not that big as 'algorithms=jwt.algorithms.get_default_algorithms()' has to be used. As a workaround, always be explicit with the algorithms that are accepted and expected when decoding.",https://data.safetycli.com/v/48542/f17
61601,urllib3,1.26.5,,"Urllib3 1.26.17 and 2.0.5 include a fix for CVE-2023-43804: Urllib3 doesn't treat the 'Cookie' HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a 'Cookie' header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly.
https://github.com/urllib3/urllib3/security/advisories/GHSA-v845-jxx5-vc9f",https://data.safetycli.com/v/61601/f17
61893,urllib3,1.26.5,,"Urllib3 1.26.18 and 2.0.7 include a fix for CVE-2023-45803: Request body not stripped after redirect from 303 status changes request method to GET.
https://github.com/urllib3/urllib3/security/advisories/GHSA-g4mx-q9vg-27p4",https://data.safetycli.com/v/61893/f17
50870,mako,1.1.3,,"Mako before 1.2.2 is vulnerable to Regular expression Denial of Service when using the Lexer class to parse. This also affects babelplugin and linguaplugin.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages",https://data.safetycli.com/v/50870/f17
51499,wheel,0.37.1,,"Wheel 0.38.1 includes a fix for CVE-2022-40898: An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.
https://pyup.io/posts/pyup-discovers-redos-vulnerabilities-in-top-python-packages",https://data.safetycli.com/v/51499/f17
52510,future,0.18.2,,"Future 0.18.2 and earlier allows remote attackers to cause a denial of service via crafted Set-Cookie header from malicious web server.
https://github.com/PythonCharmers/python-future/blob/master/src/future/backports/http/cookiejar.py#L215
https://github.com/python/cpython/pull/17157",https://data.safetycli.com/v/52510/f17
